pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--general functions --
function _update()
	if game_state == "playing" then
		if time_left > 0 then
		 time_left -= 1
		
			update_enemy()
			update_arrows()
			update_animation(player)
			update_dead_timers()
			update_paint_touches()
			if shoot_cooldown_frames > 0 then
				shoot_cooldown_frames -= 1
			end
			
			if player.dead == false then
				local speed = player.speed
				if btn(0) then
					player.x -= speed
					player.direction = 0
				elseif btn(1) then
					player.x += speed
					player.direction = 2
				end
				if btn(2) then
					player.y -= speed
					player.direction = 1
				elseif btn(3) then
					player.y += speed
					player.direction = 3
				end	
				
				if btn(5) and shoot_cooldown_frames <= 0 then
				 shoot_cooldown_frames = 20
				 shoot_arrow(player)
				end
			end
		else
			for x=1, map_size do
				for y=1, map_size do
					local tile = level_tiles[x..":"..y]
					if tile.c == player.c then
						tiles_player += 1
					else
						tiles_enemy += 1
					end
				end
			end
			
			winner = "draw"
			if tiles_player > tiles_enemy then
				winner = "player"
			elseif tiles_enemy > tiles_player then
				winner = "enemy"
			end
			
			game_state = "game_over"
		end
	elseif game_state == "menu" then
		if btn(5) then
			game_state = "playing"
			_init()
		end
	elseif game_state == "game_over" then
		if btn(5) then
			game_state = "playing"
			_init()
		end
	end
end

function _draw()
	cls()
	
	if game_state == "playing" then
		for i=1, #level_sprites do
			local level_sprite = level_sprites[i]
			circfill(level_sprite.x, level_sprite.y, 4, level_sprite.c)	
		end
		
		-- for pathing debug ! -- 
		for i=1, #enemy.actions.path do
			local tile = enemy.actions.path[i]
			circfill(tile.x, tile.y, 1, 11)				
		end

		
		draw_character(player) 
		draw_character(enemy)
		draw_animations()
		draw_arrows()
		
			-- ui --
		rectfill(0, 0, 128, 6, 8)
		print(ceil(time_left / 30), 1, 1, 7) -- /30 because; 30 fps --
		if debug_text then
			print(debug_text, 100 - #debug_text, 1, 7)
		end
		print("mem: "..(stat(0) / 2048), 20, 1, 7) 
		-- endof ui --
	elseif game_state == "menu" then
		rectfill(0, 0, 128, 128, 2)
		print("start game?", 30, 50, 15)
		print("press ❎ to start", 30, 60, 15)
		print("controls: ❎ = shoot", 30, 70, 15)
	elseif game_state == "game_over" then
		local score = "player: "..tiles_player.." / enemy: "..tiles_enemy
		local text = "its a draw!..."
		local c = 5
		local c_t = 6
		if winner == "enemy" then
			c = enemy.c
			c_t = player.c
		elseif winner == "player" then
			c = player.c
			c_t = enemy.c
		end
		rectfill(0, 0, 128, 128, c)
		print(score, 10, 40, c_t)
		print("winner: "..winner, 20, 60, c_t)
		print("❎ to play again!", 20, 70, c_t)
	end
end
-->8
-- game state and init --
game_state = "menu" -- can be: menu, playing, game_over --
	
	-- max mem = 2048 -- !
function _init()
	--sfx(2)--
	tiles_enemy = 0
	tiles_player = 0
	winner = "draw"
	round_time = 15 * 30 -- becaue: 30 fps --
	time_left = round_time
	map_size=32
	tile_size=4
	shoot_cooldown_frames = 5
	enemy_shoot_cooldown_frames = 50
	
	arrows={}
	ball = {
		x = 62,
		y = 62,
		dx = 1,
		dy = 1,
		c = 0
	}
	level_tiles = {}
	level_sprites = {}
	build_level()
	
	player = {
		x = 63,
		y = 120,
		direction=0, -- 0 = left, 1 = up, 2 = right, 3 = down --
		base_spr_index = 0,
		current_animation=nil,
		c = 2,
		drawcolor = 1,
		dead = false,
		dead_timer = 100,
		speed = 1
	}
	enemy={
		x = 64,
		y = 8,
		direction = 0,
		base_spr_index = 16,
		current_animation=nil,
		c = 15,
		drawcolor = 3,
		dead = false,
		dead_timer = 100,
		speed = 1,
		actions = {
			searching = true,
			finding_path = false,
			path = {},
			state = "initial", -- painting, walking, shooting --
			current_tile = level_tiles["16:2"],
			target_tile = {}
		}
	}
	characters = {enemy, player}
	
end

function build_level()
	for x=1, map_size do
		for y=1, map_size do
			local col = 16
			--local col = player.c
				--if y <= (map_size / 2) then
				--	col = enemy.c
				--end
			local tile = {x=x*tile_size-1, y=y*tile_size-1, c=col}	
			level_tiles[x..":"..y] = tile
			add(level_sprites, tile)
		end
	end
end

function update_paint_touches()
	for i=1, #characters do
		local character = characters[i]
		for li=1, #level_sprites do
			local level_tile = level_sprites[li]
			if (character.c == enemy.c 
				and level_tile.c == player.c) or
					(character.c == player.c and
					level_tile.c == enemy.c) then
				if character.x > level_tile.x and
					character.x < level_tile.x + 8 and
					character.y > level_tile.y and
					character.y < level_tile.y + 8 then
						character_hit(enemy)
				end
			end
		end
	end
end

function update_level_once(target_x, target_y, new_c)
	for x=1, map_size do
		for y=1, map_size do
			local tile = level_tiles[x..":"..y]
			if tile.c ~= new_c 
			 and target_x > tile.x
				and target_x < tile.x + 4
				and target_y > tile.y
				and target_y < tile.y + 4 then			 
				
					tile.c = new_c
					-- remove it from list and re-add it to make it render last --
					del(level_sprites, tile)
					add(level_sprites, tile)
				return				
			end
		end
	end
end

function update_dead_timers()
 for i=1, #characters do
		if characters[i].dead then
			characters[i].dead_timer -=1
			if characters[i].dead_timer < 0 then
				characters[i].dead = false
				characters[i].dead_timer = 100
				local random_tile_x = ceil(rnd(map_size) + 1)
				local random_tile_y = ceil(rnd(map_size) + 1)
				
				if characters[i] == enemy then
					local tile = level_tiles[random_tile_x..":"..random_tile_y]
					enemy.x = tile.x
					enemy.y = tile.y
					enemy.actions.current_tile = tile
					enemy.actions.searching = true						
				else
					characters[i].x = random_tile_x
					characters[i].y = random_til
				end
				sfx(4)
			end
		end
 end
end

function play_animation(
	character, 
	start_frame,
	end_frame, 
	speed,
	offset_x,
	offset_y
)
	if not character.current_animation then
		character.current_animation = {
			start_frame = start_frame,
			end_frame = end_frame,
			current_frame = start_frame,
			current_frame_count = 0,
			speed = speed,
			offset_x = offset_x,
			offset_y = offset_y
		}
		end
end

function update_animation(character)
	if character.current_animation then
		local anim = character.current_animation
		if anim.current_frame == anim.end_frame then
			character.current_animation = nil
			anim.current_frame = 0
		elseif anim.current_frame < anim.end_frame + 1 then
			anim.current_frame_count += anim.speed
			if anim.current_frame_count >= 1 then
				anim.current_frame += 1
				anim.current_frame_count = 0
			end
		else
			character.current_animation = nil
			anim.current_frame = 0
		end
	end
end

function draw_character(character)
	local base_spr_index = character.base_spr_index
	local direction = character.direction
	local x = character.x
	local y = character.y
		
	if character.dead then
		spr(base_spr_index + 5, x, y)
	else
		if direction == 0 then -- 0 = left --
				spr(base_spr_index + 2, x, y)
				spr(base_spr_index + 3, x - 2, y)	
		elseif direction == 1 then -- top --
			spr(base_spr_index + 4, x, y - 2)
			spr(base_spr_index + 1, x, y)	
		elseif direction == 2 then -- right --
			spr(base_spr_index + 2, x, y, 1, 1, true, false)
			spr(base_spr_index + 3, x + 2, y, 1, 1, true, false)	
		elseif direction == 3 then -- down
		 spr(base_spr_index, x, y)
			spr(base_spr_index + 4, x, y, 1, 1, false, true)	
		end
	end
end

function draw_animations()
	if player.current_animation then
			spr(
				player.current_animation.current_frame, 
				player.x + player.current_animation.offset_x, 
				player.y + player.current_animation.offset_y
			)
	end
	
	if enemy.current_animation then
	end
end

-->8
-- arrow code --
function shoot_arrow(character)
	local dx = 0
 local dy = 0
 if character.direction == 0 then
 	dx = -1
 elseif character.direction == 1 then
 	dy = -1
 elseif character.direction == 2 then
 	dx = 1
 elseif character.direction == 3 then
 	dy = 1
 end
				
	local spawn_x = character.x + 4
	local spawn_y = character.y + 4
	local corrected_x = (ceil(spawn_x / tile_size) * tile_size) + 1
	local corrected_y = (ceil(spawn_y / tile_size) * tile_size) + 1
	
	local arrow = {
	 x = corrected_x - 2, -- to put in middle --
	 y = corrected_y - 2,
		dx = dx,
		dy = dy,
		c = character.c,
		drawcolor = character.drawcolor,
		size = 0.5,
		speed = 8
	}
	if character.c == player.c then
		sfx(0)
	else
		sfx(1)
	end
	
	add(arrows, arrow)
end

function character_hit(character_hit)
	if not character_hit.dead then
		character_hit.dead = true
		sfx(3)
		-- idea: blow character up and splash paint --
		end
end

function draw_arrows()
	--for i=1, #arrows do
	--	local arrow = arrows[i]
	--	rectfill(arrow.x, arrow.y, arrow.x + 1, arrow.y + 1, arrow.drawcolor) 		
	--end
end

function update_arrows()
	local arrow_to_del = nil
	for i=1, #arrows do
		local arrow = arrows[i]
		arrow.x += arrow.dx * arrow.speed
		arrow.y += arrow.dy * arrow.speed
		if arrow.x > 128 or arrow.x < 0
		or arrow.y > 128 or arrow.y < 0 then
			arrow_to_del = arrow
		else
			-- + 2 is to fix the offset of the arrow.. --
			update_level_once(arrow.x + 2, arrow.y + 2, arrow.c)
			--if arrow.c == player.c then
			--	if arrow.x > enemy.x and
			--	arrow.x < enemy.x + 8 and
			--	arrow.y > enemy.y and
			--	arrow.y < enemy.y + 8 then
		--			character_hit(enemy)
		--		end
		--	else
		--		if arrow.x > player.x and
		--		arrow.x < player.x + 8 and
		--		arrow.y > player.y and
		--		arrow.y < player.y + 8 then
			--		character_hit(player)
			--	end
			--end
		end
	end
	
	if arrow_to_del then
		del(arrows, arrow_to_del)
	end
end
-->8
-- level objects --
walls={}
walls["10:10"] = 1
walls["20:20"] = 1
walls["30:30"] = 1
-->8
-- enemy code --
function update_enemy()
	if enemy.dead then
		return
	end
	
	if enemy.actions.searching then
	 local randomx = ceil(rnd(32) + 1)
	 local randomy = ceil(rnd(32) + 1)
	 local target_tile = level_tiles[randomx..":"..randomy]
	 if target_tile == enemy.actions.current_tile then
	 	debug_text = "same!"
	 	-- temp.. --
	 	return
	 end
	 enemy.actions.path = {}
	 enemy.actions.target_tile = target_tile
	 enemy.actions.searching = false
	 enemy.actions.finding_path = true
	elseif enemy.actions.finding_path then
		local current = enemy.actions.current_tile
	 find_path(enemy.actions.target_tile)
	end
	
	if enemy.actions.state == "walking" then
		local path = enemy.actions.path
		local tile = enemy.actions.target_tile
		walk_to_path(path)
	elseif enemy.actions.state == "painting" then
	elseif enemy.actions.state == "shooting" then
	end
	
 enemy_shoot_cooldown_frames -= 1
 if enemy_shoot_cooldown_frames <= 0 then
 	enemy_shoot_cooldown_frames = rnd(40) + 40	
 	local dir_to_player = -1
  -- todo: fix later --
 	if dir_to_player == -1 then
 		dir_to_player = flr(rnd(4))
 	end
 	enemy.direction = dir_to_player
 	shoot_arrow(enemy)
 end
end

function walk_to_path(path)
 if #path > 0 then
 	walk_on_path(path)
 else
 	debug_text = "done!"
 	enemy.actions.state = "searching"
 	enemy.actions.searching = true
 end 
end

function walk_on_path(path)
	local target = path[1]
	local dist_x = target.x - enemy.x
	local dist_y = target.y - enemy.y 
	local dist = calc_distance(dist_x, dist_y)
	local speed = enemy.speed
	local move_amount = 0
	
	if abs(dist) > speed then
		if dist_x > speed then
			enemy.x += enemy.speed
			move_amount += enemy.speed
		elseif dist_x < speed then
			enemy.x -= enemy.speed
		 move_amount += enemy.speed
		end
		
		if dist_y > speed then
			enemy.y += enemy.speed
			move_amount += enemy.speed
		elseif dist_y < speed then
			enemy.y -= enemy.speed
			move_amount += enemy.speed
		end
		
		-- temp .. --
		if dist < 1.6 then
			-- done.. for now just delete first index --
			del(path, target)	
		end
	end	
end

function find_path(target_tile)
	debug_text = "finding path.."..#enemy.actions.path
	local current_tile = enemy.actions.current_tile
	local closest_tile = closest_neighbour(current_tile, target_tile)
	if closest_tile == target_tile then
		-- done, start walking? --
		enemy.actions.finding_path = false
		enemy.actions.state = "walking"
	else
		add(enemy.actions.path, closest_tile)
		--debug_text = closest_tile.x..":"..closest_tile.y
		enemy.actions.current_tile = closest_tile
	end
end

function closest_neighbour(current_tile, target_tile)
	local closest_dist = 999
	local closest_tile = target_tile
	
	local current_tile_x = ceil(current_tile.x / tile_size)
	local current_tile_y = ceil(current_tile.y / tile_size)
	local target_tile_x = target_tile.x / tile_size
	local target_tile_y = target_tile.y / tile_size
	
	for x = current_tile_x - 1, current_tile_x + 2 do
		for y = current_tile_y - 1, current_tile_y + 2 do
			if x > 0 and x < map_size 
				and y > 0 and y < map_size then
					local dist_x = target_tile_x - x
					local dist_y = target_tile_y - y 					
					local dist = calc_distance(dist_x, dist_y)
					if dist < closest_dist then
						closest_dist = dist
						closest_tile = level_tiles[x..":"..y]
					end
			end
		end
	end	
	return closest_tile				
end

function calc_distance(dist_x, dist_y)
 return sqrt((dist_x*dist_x) + (dist_y*dist_y))
end
__gfx__
01111100001111100111100006000000066116600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111100001111100111100060000000600000060001000020202020000000000000000000000000000000000000000000000000000000000000000000000000
01626100001111100261100060000000000000000011100002020200000000000000000000000000000000000000000000000000000000000000000000000000
01666100001111100666100010000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060000000010000006000010000000000000000001000020202020000000000000000000000000000000000000000000000000000000000000000000000000
00661000000661000011100060000000000000000001000002020200000000000000000000000000000000000000000000000000000000000000000000000000
00626000000616000021600060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00166000000166000016600006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333300033333000333300006000000066336600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333330033333003333300060000000600000060003000000000000000000000000000000000000000000000000000000000000000000000000000000000000
036f6300033333000f33300060000000000000000033300000000000000000000000000000000000000000000000000000000000000000000000000000000000
03666300033333000666300030000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060000000300000006000030000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00663000006630000033300060000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000
006f60000063600000f3600060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00366000003660000036600006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
888888888888888888888888888888888888888888888888888888888888888888888888888888888882282288882288228882228228888888ff888888228888
88888f8888888882282282288888888888888888888888888888888888888888888888888888888888228882288822222288822282288888ff8f888888222888
88888f888f8888888888888888888888888888888888888888888888888888888888888888888888882288822888282282888222888888ff888f888888288888
88888f888f8f88822822822888888888888888888888888888888888888888888888888888888888882288822888222222888888222888ff888f888822288888
88888f8f8f8f8888888888888888888888888888888888888888888888888888888888888888888888228882288882222888822822288888ff8f888222288888
88888f8f8f8f888228228228888888888888888888888888888888888888888888888888888888888882282288888288288882282228888888ff888222888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555550000000000005555555555555555555555555555550000000000005500000000000055555555555
555555e555577757775555e555555555555566566656655550666066000005555555555556555566556656665550666066600005506660666000055555555555
55555ee555575757575555ee5555555555565556565656555060600600000555555555555655565656565656555060606060000550606060600005555d555555
5555eee555575757575555eee55555555556665666565655506060060000055555555555565556565656566655506060606000055060606060000555d5d55555
55555ee555575757575555ee55555555555556565556565550606006000005555555555556555656565656555550606060600005506060606000055d555d5d55
555555e555577757775555e55555555555566556555666555066606660000555555555555666566556655655555066606660000550666066600005555555d555
55555555555555555555555555555555555555555555555550000000000005555555555555555555555555555550000000000005500000000000055555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555558888888856666666656666666656666666656666666656666666656666666656666666655555555555
555555ddd5ddd5ddd55dd5d5d5555555555555555555558887788856666676656666667756677777656666777656676666656676667656667766655555dd5555
555d55d5d55d555d55d555d5d555555555555555555555887887885666776765666677675667666765666676765676766665767676765667777665555d55d555
555555ddd55d555d55d555ddd555555555555555555555878888785677666765667766675667666765666676765766676765777777775677667765555d55d555
555d55d5555d555d55d555d5d5555555555555555555557888888757666666757766666757776667757777767757666776756767676757766667755555dd5555
555555d555ddd55d555dd5d5d5555555555555555555558888888856666666656666666656666666656666666656666666656766666756666666655555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000081710000000000000000000000000000000000000000880000000000000000000000000000000000000000000000000000000000000
00000000000000000000081771000000000000000000000000000000000000000880088000000000000000000000000000000000000000000000000000000000
00000000000000000000011777100000000000000000000000000000000000000110088000000000000000000000000000000000000000000000000000000000
08800000000000000000011777710000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
08800000000000000000011771100000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100880000000000000011117100000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100880000000000000011000000000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110088000000000011000000880000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110088008800000011000000880000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011008800880011000000110000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100880011000000110000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011000000110088000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011000000110088000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011008800110011008800000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011008800110011008800000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100000088000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100880088000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100880011000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011000000880000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011000000880088000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011008800110088000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011008800110011000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011008800110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011008800110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
555555d5d55dd5d555d5d5ddd5ddd5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555d55d5d5d5d5d555d5d5ddd5d555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555555d5d5d5d5d555d5d5d5d5dd55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555d55ddd5d5d5d555d5d5d5d5d555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555dd5dd5dd555
5555555d55dd55ddd55dd5d5d5ddd5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555dd5dd5dd555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee0eee0eee0eee0eee00000eee0eee00000eee0eee0eee0eee0eee0eee0eee0eee0eee000000000000000000000000000000000000000000000000000000000
eee0eee0eee0eee0eee00000eee0eee00000eee0eee0eee0eee0eee0eee0eee0eee0eee000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110111011101110111011101110111011101110
00000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110111011101110111011101110111011101110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

__sfx__
00020000131201512017120171201a1301d13019140191501815018150000001915019150000001a1501b1501e150231502815000000000000000000000000000000000000000000000000000000000000000000
000500002045016450134501445011450104500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0010002022450234502645028450294502a450224502145021450214502a4502a4502d4503045023450264501c4501a450000001a45000000224500000021450000002845000000000002a450000001c4501e450
000300003b150391503715034150331502f1502d1502a150291501f15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0005000000000000002315026150281502b1502d1502f150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
