pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--general functions --
function _update()
	if game_state == "playing" then
		if time_left > 0 then
		 time_left -= 1
		
			if num_players == 1 then
				update_enemy()
			end
			
			update_arrows()
			--update_animation(player)
			update_dead_timers()
			
			if num_players > 0 then
				update_player(1)
				if player_one.shoot_cooldown_frames > 0 then
					player_one.shoot_cooldown_frames -= 1
				end
			end
			if num_players > 1 then
				update_player(2)
				if enemy.shoot_cooldown_frames > 0 then
					enemy.shoot_cooldown_frames -= 1
				end
			end
			
		else
			for x=1, map_size do
				for y=1, map_size do
					local tile = level_tiles[x..":"..y]
					if tile.c == player_one.c then
						tiles_player += 1
					elseif tile.c == enemy.c then
						tiles_enemy += 1
					end
				end
			end
			
			winner = "draw"
			if tiles_player > tiles_enemy then
				winner = "player"
			elseif tiles_enemy > tiles_player then
				winner = "enemy"
			end
			
			game_state = "game_over"
		end
	elseif game_state == "menu" then
		if btn(5) then
			num_players = 2
			game_state = "playing"
			_init()
		end
		if btn(4) then
			num_players = 1
			game_state = "playing"
			_init()
		end
	elseif game_state == "game_over" then
		if btn(4) then
			game_state = "playing"
			_init()
		end
	end
end

function _draw()
	cls()
	
	if game_state == "playing" then
		for i=1, #level_sprites do
			local level_sprite = level_sprites[i]
			circfill(level_sprite.x, level_sprite.y, 4, level_sprite.c)	
		end

		-- render level..		
		map(0 + ((16*(num_level-1))), 0, 0, 0, 16 * num_level, 16)
		-- for pathing debug ! -- 
		for i=1, #enemy.actions.path do
			local tile = enemy.actions.path[i]
			--circfill(tile.x, tile.y, 1, 11)				
		end
		
		draw_character(characters[1]) 
		draw_character(characters[2])
		--draw_animations()
		draw_arrows()
		
			-- ui --
		circfill(0, 0, 10, 8)
		print(ceil(time_left / 30), 1, 1, 7) -- /30 because; 30 fps --
		if debug_text then
			print(debug_text, 100 - #debug_text, 1, 7)
		end
		--print("mem: "..(stat(0) / 2048), 20, 1, 7) 
		-- endof ui --
	elseif game_state == "menu" then
		rectfill(0, 0, 128, 128, 2)
		print("start game?", 30, 50, 15)
		print("press ‚ùé/z to start", 30, 60, 15)
		print("2p mode = üÖæÔ∏è/x", 30, 70, 15)
	elseif game_state == "game_over" then
		local score = "player: "..tiles_player.." / enemy: "..tiles_enemy
		local text = "its a draw!..."
		local c = 5
		local c_t = 6
		if winner == "enemy" then
			c = enemy.c
			c_t = player_one.c
		elseif winner == "player" then
			c = player_one.c
			c_t = enemy.c
		end
		rectfill(0, 0, 128, 128, c)
		print(score, 10, 40, c_t)
		print("winner: "..winner, 20, 60, c_t)
		print("‚ùé/z to play again!", 20, 70, c_t)
	end
end

function update_player(player_number)
	local player = characters[player_number]
	if player.dead == false then
		local speed = player.speed
		local new_x = player.x
		local new_y = player.y
		local p_index = player_number - 1
		if new_x ~= nil and new_y ~= nil then			
			if btn(0, p_index) then
				new_x -= speed
				player.direction = 0
			elseif btn(1, p_index) then
				new_x += speed
				player.direction = 2
			end
			if btn(2, p_index) then
				new_y -= speed
				player.direction = 1
			elseif btn(3, p_index) then
				new_y += speed
				player.direction = 3
			end	
			
			if not has_wall_around(new_x+4, new_y+4, 4) then
				player.x = new_x
				player.y = new_y
			end
			
			if btn(4, p_index) and player.shoot_cooldown_frames <= 0 then
			 player.shoot_cooldown_frames = 20
			 shoot_arrow(player)
			end
		end
	end
end
-->8
-- game state and init --
game_state = "menu" -- can be: menu, playing, game_over --
num_players = 1
num_level = 1
	-- max mem = 2048 -- !
function _init()
	--sfx(2)--
	available_colors = {1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15 }
	spawn_points = {}
	tiles_enemy = 0
	tiles_player = 0
	winner = "draw"
	round_time = 30 * 30 -- becaue: 30 fps --
	time_left = round_time
	map_size=32
	tile_size=4
	shoot_cooldown_frames = 25
	
	num_level = ceil(rnd(3)) -- max 3 levels for now --
	arrows={}
	level_tiles = {}
	level_sprites = {}
	build_level()
	find_spawn_points()
	
	player_one = {
		id = 0,
		x = 110,
		y = 115,
		direction = 0, -- 0 = left, 1 = up, 2 = right, 3 = down --
		base_spr_index = 0,
		current_animation=nil,
		c = 3,
		drawcolor = 11,
		dead = false,
		has_weapon = true,
		dead_timer = 100,
		speed = 1,
		shoot_cooldown_frames = 5
	}
	
	local player_color_index = ceil(rnd(#available_colors))
	player_one.c = available_colors[player_color_index]
	del(available_colors, player_one.c)
		
	enemy={
		x = 8,
		y = 8,
		direction = 0,
		base_spr_index = 16,
		current_animation=nil,
		c = available_colors[ceil(rnd(#available_colors))],
		drawcolor = 14,
		dead = false,
		dead_timer = 50,
		speed = 1,
		has_weapon = true,
		shoot_cooldown_frames = 5,
		actions = {
			searching = true,
			finding_path = false,
			path = {},
			state = "initial", -- painting, walking, shooting --
			current_tile = level_tiles["2:2"],
			target_tile = {}
		}
	}
	characters = {player_one, enemy}
	respawn_character(player_one)
	respawn_character(enemy)
	
end

function build_level()
	for x=1, map_size do
		for y=1, map_size do
			local col = 16
			local tile_x = x*tile_size-1
			local tile_y = y*tile_size-1
			local tile = {x=tile_x, y=tile_y, c=col}	
			
			level_tiles[x..":"..y] = tile
			add(level_sprites, tile)
		end
	end
end

function find_spawn_points()
	local offset_x = ((map_size / 2)) * (num_level - 1)
	for x=1 + offset_x, (map_size/2) + offset_x do
		for y=1, map_size/2 do
			if mget(x, y) == 13 then
				add(spawn_points, {x=map_to_level(x),y=map_to_level(y), occupied=false})		
			end
		end
	end
end

function update_level_once(target_x, target_y, new_c)
	for x=1, map_size do
		for y=1, map_size do
			local tile = level_tiles[x..":"..y]
			if tile.c ~= new_c 
			 and target_x > tile.x
				and target_x < tile.x + 4
				and target_y > tile.y
				and target_y < tile.y + 4 then			 
				
					tile.c = new_c
					-- remove it from list and re-add it to make it render last --
					del(level_sprites, tile)
					add(level_sprites, tile)
				return				
			end
		end
	end
end

function respawn_character(character)
	local tile = find_random_spawn_tile()
				
	if character == enemy then
		enemy.x = tile.x
		enemy.y = tile.y
		if num_players == 1 then
			enemy.actions.current_tile = tile
			enemy.actions.searching = true						
		end	
	else
		character.x = tile.x
		character.y = tile.y
	end
end

function find_random_spawn_tile()
	local random_index = ceil(rnd(#spawn_points - 1) + 1)
	local random_spawn_point = spawn_points[random_index]
	local random_tile_x = random_spawn_point.x - (map_size * (num_level - 1))
	
	return level_tiles[random_tile_x..":"..random_spawn_point.y]
end

function update_dead_timers()
 for i=1, #characters do
		if characters[i].dead then
			characters[i].dead_timer -=1
			if characters[i].dead_timer < 0 then
				characters[i].dead = false
				characters[i].dead_timer = 100
				respawn_character(characters[i])
				sfx(4)
			end
		end
 end
end

function play_animation(
	character, 
	start_frame,
	end_frame, 
	speed,
	offset_x,
	offset_y
)
	if not character.current_animation then
		character.current_animation = {
			start_frame = start_frame,
			end_frame = end_frame,
			current_frame = start_frame,
			current_frame_count = 0,
			speed = speed,
			offset_x = offset_x,
			offset_y = offset_y
		}
		end
end

function update_animation(character)
	if character.current_animation then
		local anim = character.current_animation
		if anim.current_frame == anim.end_frame then
			character.current_animation = nil
			anim.current_frame = 0
		elseif anim.current_frame < anim.end_frame + 1 then
			anim.current_frame_count += anim.speed
			if anim.current_frame_count >= 1 then
				anim.current_frame += 1
				anim.current_frame_count = 0
			end
		else
			character.current_animation = nil
			anim.current_frame = 0
		end
	end
end

function draw_character(character)
	local base_spr_index = character.base_spr_index
	local direction = character.direction
	local x = character.x
	local y = character.y
	local has_weapon = false
	if character.dead then
		spr(base_spr_index + 5, x, y)
	else
		if direction == 0 then -- 0 = left --
				spr(base_spr_index, x, y)
				if has_weapon then
					spr(base_spr_index + 4, x - 4, y, 1, 1, true, false)	
				end
		elseif direction == 1 then -- top --
			if has_weapon then
				spr(base_spr_index + 3, x, y - 2)
			end
			spr(base_spr_index + 1, x, y)	
		elseif direction == 2 then -- right --
			spr(base_spr_index, x, y, 1, 1, true, false)
			if has_weapon then
				spr(base_spr_index + 4, x + 4, y)	
			end
		elseif direction == 3 then -- down
		 spr(base_spr_index + 2, x, y)
			if has_weapon then
				spr(base_spr_index + 3, x - 1, y + 3, 1, 1, false, true)	
			end
		end
	end
end

function draw_animations(player_num)
	local player = characters[player_num]
	if player.current_animation then
			spr(
				player.current_animation.current_frame, 
				player.x + player.current_animation.offset_x, 
				player.y + player.current_animation.offset_y
			)
	end
end

-->8
-- arrow code --
function shoot_arrow(character)
	local dx = 0
 local dy = 0
 if character.direction == 0 then
 	dx = -1
 elseif character.direction == 1 then
 	dy = -1
 elseif character.direction == 2 then
 	dx = 1
 elseif character.direction == 3 then
 	dy = 1
 end
				
	local spawn_x = character.x + 4
	local spawn_y = character.y + 4
	local corrected_x = (world_to_level(spawn_x) * tile_size) + 1
	local corrected_y = (world_to_level(spawn_y) * tile_size) + 1
	
	local arrow = {
	 x = corrected_x - 2, -- to put in middle --
	 y = corrected_y - 2,
		dx = dx,
		dy = dy,
		c = character.c,
		drawcolor = character.c,
		size = 0.5,
		speed = 8
	}
	if character.c == player_one.c then
		sfx(0)
	else
		sfx(1)
	end
	
	add(arrows, arrow)
end

function character_hit(character_hit)
	if not character_hit.dead then
		character_hit.dead = true
		sfx(3)
	end
end

function draw_arrows()
	for i=1, #arrows do
		local arrow = arrows[i]
		circfill(arrow.x, arrow.y, 2, 1) 		
	end
end

function update_arrows()
	local arrow_to_del = nil
	for i=1, #arrows do
		local arrow = arrows[i]
		arrow.x += arrow.dx * arrow.speed
		arrow.y += arrow.dy * arrow.speed
		
		if arrow.x > 128 or arrow.x < 0
		or arrow.y > 128 or arrow.y < 0 then
			arrow_to_del = arrow
		else
			-- + 2 is to fix the offset of the arrow.. --
			update_level_once(arrow.x + 2, arrow.y + 2, arrow.c)
			
			for i=1, #characters do
				local character = characters[i]
				if (arrow.c == player_one.c 
					and character.c == enemy.c) 
					or (arrow.c == enemy.c 
					and character.c == player_one.c) then
						if arrow.x > character.x - 4 and
							arrow.x < character.x + 8 and
							arrow.y > character.y - 4  and
							arrow.y < character.y + 8 then
								character_hit(character)
						end
					end
				end
			end
			
			if(has_wall(arrow.x, arrow.y)) then
				--set_wall(arrow.x, arrow.y, 30)
				arrow_to_del = arrow
			end
	end
	if arrow_to_del then
		del(arrows, arrow_to_del)
	end
end
-->8
-- helper functions --
function has_wall(world_x, world_y)
	-- for now: only x axis has multiple levels --
	local wall_x = world_x + ((num_level - 1) * 128)
	local tile_sprite = mget(world_to_map(wall_x), world_to_map(world_y))
	return tile_sprite == 14 or tile_sprite == 15
end

function set_wall(world_x, world_y, sprite_num) 
	mset(world_to_map(world_x), world_to_map(world_y), sprite_num)
end

function calc_distance(dist_x, dist_y)
 return sqrt((dist_x*dist_x) + (dist_y*dist_y))
end

function world_to_level(coordinate)
 return ceil(coordinate / tile_size)
end

function world_to_map(coordinate) 
 return ceil(coordinate / 8) - 1
end

function map_to_level(coordinate)
	return coordinate * 2
end

function has_wall_around(world_x, world_y, range)
	for x=world_x - range, world_x + range do
		for y=world_y - range, world_y + range do
			if has_wall(x, y) then
				return true
			end
		end
	end
	
	return false
end
-->8
-- enemy code --
function update_enemy()
	if enemy.dead then
		return
	end
	
	if enemy.actions.searching then
	 local randomx = ceil(rnd(32) + 1)
	 local randomy = ceil(rnd(32) + 1)
	 local target_tile = level_tiles[randomx..":"..randomy]
	 
	 if target_tile == enemy.actions.current_tile 
	 or target_tile == nil 
	 then
	 	-- temp.. --
	 	return
	 end
	 enemy.actions.path = {}
	 enemy.actions.target_tile = target_tile
	 enemy.actions.searching = false
	 enemy.actions.finding_path = true
	elseif enemy.actions.finding_path then
		local current = enemy.actions.current_tile
	 find_path(enemy.actions.target_tile)
	end
	
	if enemy.actions.state == "walking" then
		local path = enemy.actions.path
		local tile = enemy.actions.target_tile
		walk_to_path(path)
	elseif enemy.actions.state == "painting" then
	elseif enemy.actions.state == "shooting" then
	end
	
 enemy.shoot_cooldown_frames -= 1
 if enemy.shoot_cooldown_frames <= 0 then
 	enemy.shoot_cooldown_frames = rnd(20) + 30	
 	local dir_to_player = -1
  local dist_x = player_one.x - enemy.x
  local dist_y = player_one.y - enemy.y
  local shoot_randomly = rnd(5) == 4
  if shoot_randomly then
  	dir_to_player = -1
  else
	  
	  if abs(dist_x) < abs(dist_y) then
	  	if dist_y > 0 then
	  		dir_to_player = 3
	  	else
	  		dir_to_player = 1
	  	end
	  elseif abs(dist_x) == abs(dist_y) then
	  	dir_to_player = -1
	  else
	  	if dist_x > 0 then
	  		dir_to_player = 2
	  	else
	  		dir_to_player = 0
	 	end
	 end
 end
   
 	if dir_to_player == -1 then
 		dir_to_player = flr(rnd(4))
 	end
 	enemy.direction = dir_to_player
 	shoot_arrow(enemy)
 end
end

function walk_to_path(path)
 if #path > 0 then
 	walk_on_path(path)
 else
 	enemy.actions.state = "searching"
 	enemy.actions.searching = true
 end 
end

function walk_on_path(path)
	local target = path[1]
	local dist_x = target.x - enemy.x
	local dist_y = target.y - enemy.y 
	local dist = calc_distance(dist_x, dist_y)
	local speed = enemy.speed
	local min_dist = 1
	
	local move_x = 0
	local move_y = 0
	
	if abs(dist) > min_dist then
		if dist_x > min_dist then
			move_x = speed
		elseif dist_x < min_dist then
			move_x = -speed
		end
		
		if dist_y > min_dist then
			move_y = speed
		elseif dist_y < min_dist then
			move_y = -speed
		end
		
		if move_x == 0 and move_y == 0 then
			-- did not move.. stuck?
			del(path, target)	
		--	debug_text = "stuckk"
			return
		else
			enemy.x += move_x
			enemy.y += move_y
		end 
		-- temp .. --
		if dist < 1.6 then
			-- done.. for now just delete first index --
			del(path, target)
		end	
	end	
end

function find_path(target_tile)
	local current_tile = enemy.actions.current_tile
	local closest_tile = closest_neighbour(current_tile, target_tile)
	if closest_tile == target_tile then
		-- done, start walking? --
		done_finding_path()
	elseif closest_tile ~= nil and has_wall_around(closest_tile.x, closest_tile.y, 3) then
		-- wall in between --
		done_finding_path()	
	else
		if closest_tile == current_tile then
			done_finding_path()
		else
			add(enemy.actions.path, closest_tile)
			enemy.actions.current_tile = closest_tile
		end
	end
end

function done_finding_path()
	enemy.actions.finding_path = false
	enemy.actions.state = "walking"
end

function closest_neighbour(current_tile, target_tile)
	local closest_dist = 999
	local closest_tile = nil
	
	local current_tile_x = world_to_level(current_tile.x)
	local current_tile_y = world_to_level(current_tile.y)
	local target_tile_x = target_tile.x / tile_size
	local target_tile_y = target_tile.y / tile_size
	
	for x = current_tile_x - 1, current_tile_x + 2 do
		for y = current_tile_y - 1, current_tile_y + 2 do
			if x > 1 and x < map_size - 1 
				and y > 1 and y < map_size - 1 then 
					local dist_x = target_tile_x - x
					local dist_y = target_tile_y - y 					
					local dist = calc_distance(dist_x, dist_y)
					if dist < closest_dist then
						closest_dist = dist
						closest_tile = level_tiles[x..":"..y]
					end
			end
		end
	end	
	return closest_tile				
end
__gfx__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dddddddddddddddd
0111110000111100011111000000000000000000000000000000000000010000000000000111110000000000000000000000000000000000dddddddddddddddd
014411000011110001441100000bb000000bb000000000000000000000111000000000000144110000000000000000000000000000000000dddddddddddddddd
00444100041111000144410000bbbb0000bbbb00000000000000000000010000000000000044410000000000000000000000000000000000dddddddddddddddd
00ddd1100d1111100dddd11000bbbb0000bbbb00011111100000000000010000000000003333d11000000000000000000000000000000000dddddddddddddddd
04dddd1000d1111004dddd10000bb000000bb0000144ddd700000000000100000000000003d3dd1000000000000000000000000000000000d0d0d0d0dddddddd
00dddd0000dddd0000dddd0000000000000000000144d4d000000000000000000000000000dddd00000000000000000000000000000000000d0d0d0ddddddddd
00700700007007000070070000000000000000000114ddd70000000000000000000000000070070000000000000000000000000000000000d0d0d0d0dddddddd
0000000000000000000000000000000000000000000000000663366000000000000000000555550000000000000000000000000000000000dddddddddddddddd
0099990000999000099990000000000000000000000000006000000600030000000000000555550000000000000000000000000000000000dddddddddddddddd
09ff990000999900099f9900000ee000000ee0000000000000000000003330000000000005ff550000000000000000000000000000000000dddddddddddddddd
00fff9000f99990009fff90000eeee0000eeee000000000000000000000300000000000000fff00000000000000000000000000000000000dddddddddddddddd
00666900066999000666690000eeee0000eeee00009000000000000000030000000000002222e00000000000000000000000000000000000dddddddddddddddd
0f666600006666000f666600000ee000000ee00009ff666700000000000300000000000002e2ee0000000000000000000000000000000000d0d0d0d0dddddddd
006666000066660000666600000000000000000009ff6f6000000000000000000000000000eeee00000000000000000000000000000000000d0d0d0ddddddddd
0010010000100100001001000000000000000000099966670000000000000000000000000010010000000000000000000000000000000000d0d0d0d0dddddddd
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
888888888888888888888888888888888888888888888888888888888888888888888888888888888882282288882288228882228228888888ff888888228888
88888f8888888882282282288888888888888888888888888888888888888888888888888888888888228882288822222288822282288888ff8f888888222888
88888f888f8888888888888888888888888888888888888888888888888888888888888888888888882288822888282282888222888888ff888f888888288888
88888f888f8f88822822822888888888888888888888888888888888888888888888888888888888882288822888222222888888222888ff888f888822288888
88888f8f8f8f8888888888888888888888888888888888888888888888888888888888888888888888228882288882222888822822288888ff8f888222288888
88888f8f8f8f888228228228888888888888888888888888888888888888888888888888888888888882282288888288288882282228888888ff888222888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555550000000000005555555555555555555555555555550000000000005500000000000055555555555
555555e555577757775555e555555555555566566656655550666066000005555555555556555566556656665550666066600005506660666000055555555555
55555ee555575757575555ee5555555555565556565656555060600600000555555555555655565656565656555060606060000550606060600005555d555555
5555eee555575757575555eee55555555556665666565655506060060000055555555555565556565656566655506060606000055060606060000555d5d55555
55555ee555575757575555ee55555555555556565556565550606006000005555555555556555656565656555550606060600005506060606000055d555d5d55
555555e555577757775555e55555555555566556555666555066606660000555555555555666566556655655555066606660000550666066600005555555d555
55555555555555555555555555555555555555555555555550000000000005555555555555555555555555555550000000000005500000000000055555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555558888888856666666656666666656666666656666666656666666656666666656666666655555555555
555555ddd5ddd5ddd55dd5d5d5555555555555555555558887788856666676656666667756677777656666777656676666656676667656667766655555dd5555
555d55d5d55d555d55d555d5d555555555555555555555887887885666776765666677675667666765666676765676766665767676765667777665555d55d555
555555ddd55d555d55d555ddd555555555555555555555878888785677666765667766675667666765666676765766676765777777775677667765555d55d555
555d55d5555d555d55d555d5d5555555555555555555557888888757666666757766666757776667757777767757666776756767676757766667755555dd5555
555555d555ddd55d555dd5d5d5555555555555555555558888888856666666656666666656666666656666666656666666656766666756666666655555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000081710000000000000000000000000000000000000000880000000000000000000000000000000000000000000000000000000000000
00000000000000000000081771000000000000000000000000000000000000000880088000000000000000000000000000000000000000000000000000000000
00000000000000000000011777100000000000000000000000000000000000000110088000000000000000000000000000000000000000000000000000000000
08800000000000000000011777710000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
08800000000000000000011771100000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100880000000000000011117100000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100880000000000000011000000000000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110088000000000011000000880000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110088008800000011000000880000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011008800880011000000110000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100880011000000110000000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011000000110088000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011000000110088000000000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011008800110011008800000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011008800110011008800000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100000000000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100000088000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100880088000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100880011000000000000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011000000880000000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011000000880088000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011008800110088000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011008800110011000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011000000110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011008800110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011008800110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
01100110011001100110011001100110011001100110011001100110011001100110011000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
555555d5d55dd5d555d5d5ddd5ddd5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555d55d5d5d5d5d555d5d5ddd5d555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555555d5d5d5d5d555d5d5d5d5dd55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555d11d11dd555
555d55ddd5d5d5d555d5d5d5d5d555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555dd5dd5dd555
5555555d55dd55ddd55dd5d5d5ddd5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555dd5dd5dd555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee0eee0eee0eee0eee00000eee0eee00000eee0eee0eee0eee0eee0eee0eee0eee0eee000000000000000000000000000000000000000000000000000000000
eee0eee0eee0eee0eee00000eee0eee00000eee0eee0eee0eee0eee0eee0eee0eee0eee000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110111011101110111011101110111011101110
00000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110111011101110111011101110111011101110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

__map__
000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000d000000000000000000000000000d0e0e0e0e0e0e1e1e1e1e1e1e1e0e0e0e0f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000d0000000000000000000000000000000000000000000000000f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000f0f000000000000000f0f0000000d00000000000000000000000000000f0000000d000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000e0e000000000000000e0e000000000000000f00000d000000000000000f00000000000000000000000d00000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000f000000000f0000000000000000000f0f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000f000000000e000000000f0f0000000f0f00000000000000000d00000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000d0000000000000d0000000000000d0f0000000000000000000e0e000d000f0f0e0e0000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000e00000000000000000000000000000f0f00000000000000000000000e0e0e0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000e0f0000000d000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000f0000000d0000000000000f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000f0f000000000000000f0f000000000d00000f000000000000000f00000f0e0e0e0e0e0e0e0000000000000d0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000e0e000000000000000e0e000000000000000e000000000000000e00000f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000f000000000d0000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000d00000000000d000000000000000d000000000d00000000000000000000000f00000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00020000131201512017120171201a1301d13019140191501815018150000001915019150000001a1501b1501e150231502815000000000000000000000000000000000000000000000000000000000000000000
000500002045016450134501445011450104500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0010002022450234502645028450294502a450224502145021450214502a4502a4502d4503045023450264501c4501a450000001a45000000224500000021450000002845000000000002a450000001c4501e450
000300003b150391503715034150331502f1502d1502a150291501f15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0005000000000000002315026150281502b1502d1502f150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
